@page "/students-details"
@using BlazorCrud.Library
@inject HttpClient http
@inject NavigationManager navigate

<div class="row mb-3">
    <div class="d-flex justify-content-between align-items-center">
        <h3 class="mb-0">StudentsDetails</h3>
        <button class="btn btn-primary" @onclick="GoToCreateStudent">Create Student</button>
    </div>
</div>


<div class="row">
    <div class="container">
        @if (Student == null)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Father Name</th>
                        <th scope="col">Reg No</th>
                        <th scope="col">Address</th>
                        <th scope="col">Phone</th>
                        <th scope="col">Email</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Student)
                    {
                        <tr>
                            <th scope="row">@item.Id</th>
                            <td>@item.Name</td>
                            <td>@item.FatherName</td>
                            <td>@item.RegNo</td>
                            <td>@item.Address</td>
                            <td>@item.Phone</td>
                            <td>@item.Email</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => GoToUpdateStudent(item.Id)">Edit</button>

                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteStudent(item.Id)">Delete</button>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        }
        
    </div>
</div>

@code {

    public IEnumerable<Student> Student { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Student = await http.GetFromJsonAsync<IEnumerable<Student>>("https://localhost:7179/api/Students/GetStudents");
    }

    private void GoToCreateStudent()
    {
        navigate.NavigateTo("/create-student");
    }

    private void GoToUpdateStudent(int id)
    {
        navigate.NavigateTo($"/update-student/{id}");
    }

    private async Task DeleteStudent(int id)
    {

        var response = await http.DeleteAsync($"https://localhost:7179/api/Students/DeleteStudent?id={id}");


        if (response.IsSuccessStatusCode)
        {
            // Re-fetch updated list or filter deleted one out
            Student = Student.Where(s => s.Id != id).ToList();
        }
    }




}
